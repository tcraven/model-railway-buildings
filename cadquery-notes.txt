CadQuery Notes

It was tricky to install the library because there is no Apple Silicon version.

Here is how to install it:
https://github.com/CadQuery/cadquery/issues/891#issuecomment-1330922010
```
$ arch -x86_64 brew install miniconda
$ arch -x86_64 conda install -c cadquery -c conda-forge cadquery=master
$ arch -x86_64 conda install -c cadquery -c conda-forge cq-editor=master
$ arch -x86_64 /opt/homebrew/Caskroom/miniconda/base/bin/python
```

Use the special Python version for running cadquery scripts:
./cq-python

Run the CadQuery Editor user interface:
./cq-editor

There is no Pipenv for this directory - everything is contained inside the Conda Python installation.

- DONE Create box with tabs
- Create house with tabs
- Export panel sketches data
    - To SVG
    - To data to put into the packing algorithm
    - To laser cut

render.py
- Render a model
    - The model is a collection of walls (plates?) arranged into the building shape
    - The model is defined in source code
    - Constructed using CadQuery combining functions to draw walls
        - Tabs and tab cut outs
        - Windows, archways and other holes
        - Access holes in framing
    - Shape functions can be re-used
        - Simple rectangular walls with configurable width, height, tabs
        - Gable wall with configurable width, height, gable height, tabs
        - All walls can have windows, doors, archways, etc cut out
    - Assembly functions can be re-used
        - Rectangular walls make a box
        - Rectangular and Gable walls make a house
        - Multiple Boxes and Houses combine to make complex buildings

- The model is output as a 3D model to be rendered in Blender and Three JS
    - Useful for photo matching and verifying that model looks good
- The model is output as a set of SVG files that are used by the laser cutter
    - plates are correctly sized to real units (mm)
    - plates are arranged on multiple pages if necessary
    - plates are numbered to make assembly easier
    - for each page, one SVG file contains lines and text to be etched
    - for each page, one SVG file contains lines to be cut
    - Each media type (2mm card, 0.5mm card) has its own set of SVG files
- Output directory structure
    - <model_name>
        - mesh.gltf
        - media-2mm
            - page-1-draw.svg
            - page-1-cut.svg
            - page-2-draw.svg
            - page-2-cut.svg
        - media-05mm
            - page-1-draw.svg
            - page-1-cut.svg
            - page-2-draw.svg
            - page-2-cut.svg

Simple first implementation
- render.py end-to-end
- Use my existing box example
- Output mesh.gltf
- Output SVG files (use existing code from earlier project)
- Physically draw and cut out on the laser cutter
- Assemble the model

- It worked OK!
- Assembly was tricky because the card and tabs are very thin
- Try doubling the thickness and forming double panels?
- I increased the number of laser passes from 2 to 3 because the cut
  wasn't clean enough

- Chimney estimated size: 23 x 45 inches
    => 8 x 15 mm
    => 5 layers of 1.69 mm card x 15 mm

TO DO:
- Support both double layer and single layer material in same model
    - Some chimney parts are single layer
- Hole in roof for chimney
- Chimney parts
- Add 1mm clearance for chimney to help with assembly

- Slot in chimney parts for alignment?
- Chimney box instead of layers?

- Laser cut parts must be 2mm or larger otherwise they won't work
  on the model
    - Need to simplify house details


468 x 783 px
14 x 23 mm


- Window and Texture Experiments

- WindowTest
    - I used very thin 0.5mm window frame pieces
    - They look good, but perhaps too thin?
    - I used two layers for the windows - not noticeable on the model
    - Brick texture looks great and wrapping worked well
    - Wrapping adds approximately 0.5mm extra to dimensions (0.25mm each edge?)
    - Window sills look great
    - Try again with single layer windows
    - Will thicker frames look worse? Or better?
    - Perhaps try 0.75mm and 1mm frames in single layer

- Single Layer Windows
    - I tried 0.5, 0.75 and 1mm center frame thicknesses
    - 0.75 mm looks best! Slightly better than 0.5mm
    - 1 mm looks a bit too thick
    - Use the same three pass laser settings as for corrugated card!
    - Single layer windows are much easier to put together


TO DO:
- Windows as add-ons


# A single panel of a single material (base wall with tabs, front wall, etc)
Panel
- name
- media_name
- workplane

# Multiple panels of perhaps different materials and thicknesses grouped together
# into a logical component (base wall, front wall and rear wall)
# Allow other PanelGroups to be added to a PanelGroup as children so that
# components such as windows and doors can be conveniently added to walls
PanelGroup
- name
- panels List<Panel>
    - panel Panel
    - transforms (list of rotations and/or translations)
- children List<PanelGroup>
    - panelGroup PanelGroup
    - transforms


Wall
- windows
- doors
- arches
- etc

Window
- panels
    - frame
        - add to parent panels
        - transforms
    - sill
        - add to parent panels
        - transforms
    - front_opening
        - subtract from specific parent panels
        - not included in vertices for export
    - back_opening
        - subtract from specific parent panels
        - not included in vertices for export

wall = wall_panel_group(...)
wall.add(window_panel_group(...))
wall.add(window_panel_group(...))
wall.add(door_panel_group(...))

w = wall(width=50, height=30)
w.add(window(width=10, height=15, x=-20, y=0))
w.add(window(width=10, height=15, x=20, y=0))
w.add(door(width=10, height=25, x=0, y=-2.5))

def add(panel_group):
    for panel in panel_group.panels:
        if panel.action == "add":
            self.panels.append(panel)
        if panel.action == "subtract":
            parent = self.get_panel_by_tag(panel.subtract_from_tag)
            parent.workplane = parent.workplane - panel.workplane

# This would subtract the window front_opening and back_opening from the
# correct workplanes in the parent wall panel group, and add the frame and sill
# panels to the parent wall panel group list of panels

Window PanelGroup
name = "window"
panels = [
    { "transforms": [...], "name": "frame", "media_name": "a", "workplane": X }
    { "transforms": [...], "name": "sill", "media_name": "a", "workplane": X }
    { "transforms": [...], "name": "front_opening", "subtract_from": ["front_wall"], "workplane": X }
    { "transforms": [...], "name": "back_opening", "subtract_from": ["base_wall", "back_wall"], "workplane": X }
]
children = []


wall.add_modifier(window(width=10, height=15, x=-20, y=0))

Wall PanelGroup
name = "wall"
panels = [
    { "transforms": [...], "name": "base_wall", "media_name": "a", "workplane": X }
    { "transforms": [...], "name": "front_wall", "media_name": "a", "workplane": X }
    { "transforms": [...], "name": "back_wall", "media_name": "a", "workplane": X }
]
children = [
    { "transforms": [...], "panel_group": X },  # Window 1
    { "transforms": [...], "panel_group": X },  # Window 2
    { "transforms": [...], "panel_group": X }   # Door
]

# - The workplane of each Panel object is the untransformed CadQuery workplane object
# - The transforms field contains the transforms to be applied to the workplane to
#   obtain the positions for the PanelGroup


Panel
- name
- transform
- media
- workplane

PanelGroup
- name
- transform
- panels List<Panel>
- children List<PanelGroup>

# Nest PanelGroups?
# Top-level PanelGroup is used to create the CadQuery Assembly for GLTF export?

PanelGroup Tree example

House
    MainHouse
        Wall
            Window
            Window
        Wall
            Window
        Wall
            Window
        Wall
            Window
            Door
        Floor
        Roof
    PorchHouse
        Wall
            Door
        Wall
        Wall
        Roof

PanelGroup functions
- add(panel_group)              Adds a child PanelGroup
- get_assembly()                Returns a CadQuery Assembly object


- Stokesley station roof triangle
    - 456 x 300 px
    => ratio of width to gable_height = 0.329
    => Given width of 70, gable_height = 70 * 0.329 = 23

photo_match directory
- Flask server to serve files
    - output directory gltf files to show card models against photos
    - photo_match data (photos, lines, shapes, project name, etc)
- HTML web page
    - Show photo
    - Show lines
    - Pan and zoom
    - Show lines 3D model for optimization
    - Show rendered 3D model for positioning of roof, windows, etc
- Combine best bits of:
    - model-railways/three-js-test/test-1.html
        - HTML page that does photo matching
        - Renders 3D objects
        - Exports camera data
    - software-projects/my-app
        - Electron app
        - Pan/zoom photos
        - Show lines
        - Select points
- Necessary functionality
    - Code only:
        - Define basic house shapes for photo matching
        - Define lines, points and corresponding edge IDs
        - Define photos
    - Nice to have:
        - Drag points to edit their positions while panning and zooming
    - 3D
        - Show target shape with its edges and edge IDs
        - Show rendered model in place of target shape
        - Adjust opacity
        - Have 3D view change correctly when panning and zooming over the
          image
        - Have rendered model refresh easily
    - Texture Projection
        - It looks like this library can project the photo as a texture
          onto the 3D object using the camera:
        - https://marcofugaro.github.io/three-projected-material/basic
        - https://github.com/marcofugaro/three-projected-material/blob/master/examples/basic.html
        - Could be useful for positioning and sizing windows and doors?
        - If I extend the 3D to how top, bottom, front, back, left, right
          views with orthographic projection, I can directly compare the
          rendered 3D model with the projected photo texture

TO DO:
- Zoom directly onto mouse pointer position
    - Set position to mouse (x, y) when zooming and let boundary checks take care of result?
    - Need to convert from event x, y pixels position to normalized x, y position
- Add sliders for opacity



Scene
    photos: Photo[]
        id: number
        name: string
        width: number
        height: number
        url: string
        lines: Line[]
            id: number
            matchingEdgeIndex: number       // The index of the line model edge that this line should match
            v0: Point2D                     // Photo image pixels or normalized view units?
            v1: Point2D
        cameraTransform: CameraTransform    // Transform of the camera that matches the photo, calculated from the lines by the algorithm
            fov: number
            position: Vector3D
            rotation: Vector3D
        orbitCameraTransform: OrbitCameraTransform      // Transform of the camera when in orbit mode (used to give initial conditions for the algorithm)
            fov: number
            pivotPosition: Vector3D                     // Consider writing custom orbit that has a pivot rotation to enable calculation from general cameraTransform
            distance: number                            // Dolly move in or out
            polarAngle: number
            azimuthAngle: number
        uiSettings: PhotoUiSettings
            photoOpacity: number
            linesOpacity: number
            lineModelsOpacity: number       // 3D line model view opacity
            modelsOpacity: number           // 3D model view opacity
            controlMode: ControlMode
            cameraMode: CameraMode
    
    lineModels: LineModel3d[]
        TO DO

    models: Model3d[]
        TO DO
    
    uiSettings: SceneUiSettings
        photoId: number

PhotoMatchData
    scenes: Scene[]
    uiSettings: PhotoMatchDataUiSettings
        sceneId: number


- Incorporate lens correction into the app?
- https://github.com/jywarren/fisheyegl/tree/main
- Should be able to plug it in easily!

Added photo-match-server web server and photo-match-data data directory, and converted photo-match-web to use the server to store its data, and to use React useContext to store state at the top level and change state using actions.
