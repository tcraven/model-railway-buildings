CadQuery Notes

It was tricky to install the library because there is no Apple Silicon version.

Here is how to install it:
https://github.com/CadQuery/cadquery/issues/891#issuecomment-1330922010
```
$ arch -x86_64 brew install miniconda
$ arch -x86_64 conda install -c cadquery -c conda-forge cadquery=master
$ arch -x86_64 conda install -c cadquery -c conda-forge cq-editor=master
$ arch -x86_64 /opt/homebrew/Caskroom/miniconda/base/bin/python
```

Use the special Python version for running cadquery scripts:
./cq-python

Run the CadQuery Editor user interface:
./cq-editor

There is no Pipenv for this directory - everything is contained inside the Conda Python installation.

- DONE Create box with tabs
- Create house with tabs
- Export panel sketches data
    - To SVG
    - To data to put into the packing algorithm
    - To laser cut

render.py
- Render a model
    - The model is a collection of walls (plates?) arranged into the building shape
    - The model is defined in source code
    - Constructed using CadQuery combining functions to draw walls
        - Tabs and tab cut outs
        - Windows, archways and other holes
        - Access holes in framing
    - Shape functions can be re-used
        - Simple rectangular walls with configurable width, height, tabs
        - Gable wall with configurable width, height, gable height, tabs
        - All walls can have windows, doors, archways, etc cut out
    - Assembly functions can be re-used
        - Rectangular walls make a box
        - Rectangular and Gable walls make a house
        - Multiple Boxes and Houses combine to make complex buildings

- The model is output as a 3D model to be rendered in Blender and Three JS
    - Useful for photo matching and verifying that model looks good
- The model is output as a set of SVG files that are used by the laser cutter
    - plates are correctly sized to real units (mm)
    - plates are arranged on multiple pages if necessary
    - plates are numbered to make assembly easier
    - for each page, one SVG file contains lines and text to be etched
    - for each page, one SVG file contains lines to be cut
    - Each media type (2mm card, 0.5mm card) has its own set of SVG files
- Output directory structure
    - <model_name>
        - mesh.gltf
        - media-2mm
            - page-1-draw.svg
            - page-1-cut.svg
            - page-2-draw.svg
            - page-2-cut.svg
        - media-05mm
            - page-1-draw.svg
            - page-1-cut.svg
            - page-2-draw.svg
            - page-2-cut.svg

Simple first implementation
- render.py end-to-end
- Use my existing box example
- Output mesh.gltf
- Output SVG files (use existing code from earlier project)
- Physically draw and cut out on the laser cutter
- Assemble the model

- It worked OK!
- Assembly was tricky because the card and tabs are very thin
- Try doubling the thickness and forming double panels?
- I increased the number of laser passes from 2 to 3 because the cut
  wasn't clean enough

- Chimney estimated size: 23 x 45 inches
    => 8 x 15 mm
    => 5 layers of 1.69 mm card x 15 mm

TO DO:
- Support both double layer and single layer material in same model
    - Some chimney parts are single layer
- Hole in roof for chimney
- Chimney parts
- Add 1mm clearance for chimney to help with assembly

- Slot in chimney parts for alignment?
- Chimney box instead of layers?

- Laser cut parts must be 2mm or larger otherwise they won't work
  on the model
    - Need to simplify house details


468 x 783 px
14 x 23 mm


- Window and Texture Experiments

- WindowTest
    - I used very thin 0.5mm window frame pieces
    - They look good, but perhaps too thin?
    - I used two layers for the windows - not noticeable on the model
    - Brick texture looks great and wrapping worked well
    - Wrapping adds approximately 0.5mm extra to dimensions (0.25mm each edge?)
    - Window sills look great
    - Try again with single layer windows
    - Will thicker frames look worse? Or better?
    - Perhaps try 0.75mm and 1mm frames in single layer
